(()=>{"use strict";var e,n,r,t,a,o,i,c,s,d,u,l,A,f,p,m={772:(e,n,r)=>{r.d(n,{Z:()=>h});var t=r(537),a=r.n(t),o=r(645),i=r.n(o),c=r(667),s=r.n(c),d=new URL(r(374),r.b),u=new URL(r(33),r.b),l=new URL(r(750),r.b),A=i()(a()),f=s()(d),p=s()(u),m=s()(l);A.push([e.id,"*,\r\n*::before,\r\n*::after {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\n@font-face {\r\n    font-family: New Cursive;\r\n    src: url("+f+");\r\n}\r\n\r\n@font-face {\r\n    font-family: InterTight;\r\n    src: url("+p+");\r\n}\r\n\r\n\r\n\r\n:root {\r\n    height: 100%;\r\n    width: 100%;\r\n}\r\n\r\n\r\nbody {\r\n    height: 100%;\r\n    width: 100%;\r\n    background: #fda4af;\r\n    background-image: url("+m+");\r\n    background-position: 90%;\r\n    background-repeat: no-repeat;\r\n    background-size: 500px 500px;\r\n\r\n}\r\n\r\n\r\n#content {\r\n    height: 100%;\r\n    width: 100%;\r\n    display: grid;\r\n    grid-template-rows: 0.1fr 1fr;\r\n}\r\n\r\n.header-container {\r\n    grid-column: 1 / -1;\r\n    color: white;\r\n    font-family: InterTight, 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\r\n    font-size: clamp(1rem, 0.8475rem + 0.6780vw, 1.5rem);\r\n    font-weight: bold;\r\n    padding: 1em 4em;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    box-shadow: 2px 2px 6px #6b7280;\r\n    background-color: #fb7185;\r\n\r\n}\r\n\r\n.header-container span {\r\n    font-family: New Cursive;\r\n    font-weight: bold;\r\n}\r\n\r\n.tab-container {\r\n    display: flex;\r\n    padding-left: 2em;\r\n    gap: 3em;\r\n}\r\n\r\n\r\nli {\r\n    list-style: none;\r\n}\r\n\r\nli:hover {\r\n    cursor: pointer;\r\n    color: #f43f5e;\r\n}\r\n\r\n.icon-container {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.75em;\r\n}\r\n\r\n.header-icon {\r\n    width: 2rem;\r\n    height: 2rem;\r\n    filter: invert(100%) sepia(0%) saturate(7500%) hue-rotate(307deg) brightness(107%) contrast(101%);\r\n}\r\n\r\n.header-icon:hover {\r\n    cursor: pointer;\r\n    filter: invert(35%) sepia(73%) saturate(2798%) hue-rotate(328deg) brightness(99%) contrast(94%);\r\n}\r\n\r\n.header-button,\r\n.body-button {\r\n    color: white;\r\n    background-color: orange;\r\n    height: 2.5rem;\r\n    width: 9rem;\r\n    border-radius: 20px;\r\n    border: none;\r\n    font-weight: bold;\r\n    font-family: InterTight;\r\n}\r\n\r\n.header-button:hover,\r\n.body-button:hover {\r\n    cursor: pointer;\r\n    background-color: #f43f5e;\r\n    box-shadow: 0px 0px 15px lightcyan;\r\n}\r\n\r\n.body-home-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1.5em;\r\n    margin-top: 5%;\r\n    padding: 1em 96px;\r\n    color: white;\r\n\r\n}\r\n\r\n#body-title {\r\n    font-family: New Cursive;\r\n    font-size: 3.5rem;\r\n}\r\n\r\n.body-description {\r\n    font-size: 1.5rem;\r\n    font-family: InterTight;\r\n    max-width: 65ch;\r\n}","",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;;;IAGI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,wBAAwB;IACxB,4CAA4D;AAChE;;AAEA;IACI,uBAAuB;IACvB,4CAAqD;AACzD;;;;AAIA;IACI,YAAY;IACZ,WAAW;AACf;;;AAGA;IACI,YAAY;IACZ,WAAW;IACX,mBAAmB;IACnB,yDAAiG;IACjG,wBAAwB;IACxB,4BAA4B;IAC5B,4BAA4B;;AAEhC;;;AAGA;IACI,YAAY;IACZ,WAAW;IACX,aAAa;IACb,6BAA6B;AACjC;;AAEA;IACI,mBAAmB;IACnB,YAAY;IACZ,mHAAmH;IACnH,oDAAoD;IACpD,iBAAiB;IACjB,gBAAgB;IAChB,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,+BAA+B;IAC/B,yBAAyB;;AAE7B;;AAEA;IACI,wBAAwB;IACxB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,QAAQ;AACZ;;;AAGA;IACI,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,iGAAiG;AACrG;;AAEA;IACI,eAAe;IACf,+FAA+F;AACnG;;AAEA;;IAEI,YAAY;IACZ,wBAAwB;IACxB,cAAc;IACd,WAAW;IACX,mBAAmB;IACnB,YAAY;IACZ,iBAAiB;IACjB,uBAAuB;AAC3B;;AAEA;;IAEI,eAAe;IACf,yBAAyB;IACzB,kCAAkC;AACtC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,UAAU;IACV,cAAc;IACd,iBAAiB;IACjB,YAAY;;AAEhB;;AAEA;IACI,wBAAwB;IACxB,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;IACjB,uBAAuB;IACvB,eAAe;AACnB",sourcesContent:["*,\r\n*::before,\r\n*::after {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\n@font-face {\r\n    font-family: New Cursive;\r\n    src: url('../fonts/AnandaBlackPersonalUseRegular-rg9Rx.ttf');\r\n}\r\n\r\n@font-face {\r\n    font-family: InterTight;\r\n    src: url('../fonts/InterTight-VariableFont_wght.ttf');\r\n}\r\n\r\n\r\n\r\n:root {\r\n    height: 100%;\r\n    width: 100%;\r\n}\r\n\r\n\r\nbody {\r\n    height: 100%;\r\n    width: 100%;\r\n    background: #fda4af;\r\n    background-image: url('../icons/toppng.com-the-best-belgian-waffles-waffle-clipart-715x1014.png');\r\n    background-position: 90%;\r\n    background-repeat: no-repeat;\r\n    background-size: 500px 500px;\r\n\r\n}\r\n\r\n\r\n#content {\r\n    height: 100%;\r\n    width: 100%;\r\n    display: grid;\r\n    grid-template-rows: 0.1fr 1fr;\r\n}\r\n\r\n.header-container {\r\n    grid-column: 1 / -1;\r\n    color: white;\r\n    font-family: InterTight, 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\r\n    font-size: clamp(1rem, 0.8475rem + 0.6780vw, 1.5rem);\r\n    font-weight: bold;\r\n    padding: 1em 4em;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    box-shadow: 2px 2px 6px #6b7280;\r\n    background-color: #fb7185;\r\n\r\n}\r\n\r\n.header-container span {\r\n    font-family: New Cursive;\r\n    font-weight: bold;\r\n}\r\n\r\n.tab-container {\r\n    display: flex;\r\n    padding-left: 2em;\r\n    gap: 3em;\r\n}\r\n\r\n\r\nli {\r\n    list-style: none;\r\n}\r\n\r\nli:hover {\r\n    cursor: pointer;\r\n    color: #f43f5e;\r\n}\r\n\r\n.icon-container {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.75em;\r\n}\r\n\r\n.header-icon {\r\n    width: 2rem;\r\n    height: 2rem;\r\n    filter: invert(100%) sepia(0%) saturate(7500%) hue-rotate(307deg) brightness(107%) contrast(101%);\r\n}\r\n\r\n.header-icon:hover {\r\n    cursor: pointer;\r\n    filter: invert(35%) sepia(73%) saturate(2798%) hue-rotate(328deg) brightness(99%) contrast(94%);\r\n}\r\n\r\n.header-button,\r\n.body-button {\r\n    color: white;\r\n    background-color: orange;\r\n    height: 2.5rem;\r\n    width: 9rem;\r\n    border-radius: 20px;\r\n    border: none;\r\n    font-weight: bold;\r\n    font-family: InterTight;\r\n}\r\n\r\n.header-button:hover,\r\n.body-button:hover {\r\n    cursor: pointer;\r\n    background-color: #f43f5e;\r\n    box-shadow: 0px 0px 15px lightcyan;\r\n}\r\n\r\n.body-home-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1.5em;\r\n    margin-top: 5%;\r\n    padding: 1em 96px;\r\n    color: white;\r\n\r\n}\r\n\r\n#body-title {\r\n    font-family: New Cursive;\r\n    font-size: 3.5rem;\r\n}\r\n\r\n.body-description {\r\n    font-size: 1.5rem;\r\n    font-family: InterTight;\r\n    max-width: 65ch;\r\n}"],sourceRoot:""}]);const h=A},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r="",t=void 0!==n[5];return n[4]&&(r+="@supports (".concat(n[4],") {")),n[2]&&(r+="@media ".concat(n[2]," {")),t&&(r+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),r+=e(n),t&&(r+="}"),n[2]&&(r+="}"),n[4]&&(r+="}"),r})).join("")},n.i=function(e,r,t,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(t)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var u=[].concat(e[d]);t&&i[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),n.push(u))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],r=e[3];if(!r)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(a," */"),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}},731:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.FORMAT_PLAIN=n.FORMAT_HTML=n.FORMATS=void 0;var r="html";n.FORMAT_HTML=r;var t="plain";n.FORMAT_PLAIN=t;var a=[r,t];n.FORMATS=a},670:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.LINE_ENDINGS=void 0,n.LINE_ENDINGS={POSIX:"\n",WIN32:"\r\n"}},3:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.SUPPORTED_PLATFORMS=void 0,n.SUPPORTED_PLATFORMS={DARWIN:"darwin",LINUX:"linux",WIN32:"win32"}},755:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.UNIT_WORDS=n.UNIT_WORD=n.UNIT_SENTENCES=n.UNIT_SENTENCE=n.UNIT_PARAGRAPHS=n.UNIT_PARAGRAPH=n.UNITS=void 0;var r="words";n.UNIT_WORDS=r;var t="word";n.UNIT_WORD=t;var a="sentences";n.UNIT_SENTENCES=a;var o="sentence";n.UNIT_SENTENCE=o;var i="paragraphs";n.UNIT_PARAGRAPHS=i;var c="paragraph";n.UNIT_PARAGRAPH=c;var s=[r,t,a,o,i,c];n.UNITS=s},749:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.WORDS=void 0,n.WORDS=["ad","adipisicing","aliqua","aliquip","amet","anim","aute","cillum","commodo","consectetur","consequat","culpa","cupidatat","deserunt","do","dolor","dolore","duis","ea","eiusmod","elit","enim","esse","est","et","eu","ex","excepteur","exercitation","fugiat","id","in","incididunt","ipsum","irure","labore","laboris","laborum","Lorem","magna","minim","mollit","nisi","non","nostrud","nulla","occaecat","officia","pariatur","proident","qui","quis","reprehenderit","sint","sit","sunt","tempor","ullamco","ut","velit","veniam","voluptate"]},380:(e,n,r)=>{n.fH=void 0;var t,a=r(731),o=r(755),i=r(749),c=(t=r(935))&&t.__esModule?t:{default:t};n.fH=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.count,r=void 0===n?1:n,t=e.format,s=void 0===t?a.FORMAT_PLAIN:t,d=e.paragraphLowerBound,u=void 0===d?3:d,l=e.paragraphUpperBound,A=void 0===l?7:l,f=e.random,p=e.sentenceLowerBound,m=void 0===p?5:p,h=e.sentenceUpperBound,g=void 0===h?15:h,v=e.units,b=void 0===v?o.UNIT_SENTENCES:v,I=e.words,y=void 0===I?i.WORDS:I,C=e.suffix,w=void 0===C?"":C,B={random:f,sentencesPerParagraph:{max:A,min:u},words:y,wordsPerSentence:{max:g,min:m}},x=new c.default(B,s,w);switch(b){case o.UNIT_PARAGRAPHS:case o.UNIT_PARAGRAPH:return x.generateParagraphs(r);case o.UNIT_SENTENCES:case o.UNIT_SENTENCE:return x.generateSentences(r);case o.UNIT_WORDS:case o.UNIT_WORD:return x.generateWords(r);default:return""}}},935:(e,n,r)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t,a=r(731),o=r(670),i=(t=r(140))&&t.__esModule?t:{default:t},c=r(270);function s(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function d(e,n){for(var r=0;r<n.length;r++){var t=n[r];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function u(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}var l=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a.FORMAT_PLAIN,t=arguments.length>2?arguments[2]:void 0;if(s(this,e),this.format=r,this.suffix=t,u(this,"generator",void 0),-1===a.FORMATS.indexOf(r.toLowerCase()))throw new Error("".concat(r," is an invalid format. Please use ").concat(a.FORMATS.join(" or "),"."));this.generator=new i.default(n)}var n,r;return n=e,(r=[{key:"getLineEnding",value:function(){return this.suffix?this.suffix:!(0,c.isReactNative)()&&(0,c.isNode)()&&(0,c.isWindows)()?o.LINE_ENDINGS.WIN32:o.LINE_ENDINGS.POSIX}},{key:"formatString",value:function(e){return this.format===a.FORMAT_HTML?"<p>".concat(e,"</p>"):e}},{key:"formatStrings",value:function(e){var n=this;return e.map((function(e){return n.formatString(e)}))}},{key:"generateWords",value:function(e){return this.formatString(this.generator.generateRandomWords(e))}},{key:"generateSentences",value:function(e){return this.formatString(this.generator.generateRandomParagraph(e))}},{key:"generateParagraphs",value:function(e){var n=this.generator.generateRandomParagraph.bind(this.generator);return this.formatStrings((0,c.makeArrayOfStrings)(e,n)).join(this.getLineEnding())}}])&&d(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),e}();n.default=l},140:(e,n,r)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=r(749),a=r(270);function o(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function i(e,n){for(var r=0;r<n.length;r++){var t=n[r];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function c(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}var s=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.sentencesPerParagraph,a=void 0===r?{max:7,min:3}:r,i=n.wordsPerSentence,s=void 0===i?{max:15,min:5}:i,d=n.random,u=(n.seed,n.words),l=void 0===u?t.WORDS:u;if(o(this,e),c(this,"sentencesPerParagraph",void 0),c(this,"wordsPerSentence",void 0),c(this,"random",void 0),c(this,"words",void 0),a.min>a.max)throw new Error("Minimum number of sentences per paragraph (".concat(a.min,") cannot exceed maximum (").concat(a.max,")."));if(s.min>s.max)throw new Error("Minimum number of words per sentence (".concat(s.min,") cannot exceed maximum (").concat(s.max,")."));this.sentencesPerParagraph=a,this.words=l,this.wordsPerSentence=s,this.random=d||Math.random}var n,r;return n=e,(r=[{key:"generateRandomInteger",value:function(e,n){return Math.floor(this.random()*(n-e+1)+e)}},{key:"generateRandomWords",value:function(e){var n=this,r=this.wordsPerSentence,t=r.min,o=r.max,i=e||this.generateRandomInteger(t,o);return(0,a.makeArrayOfLength)(i).reduce((function(e,r){return"".concat(n.pluckRandomWord()," ").concat(e)}),"").trim()}},{key:"generateRandomSentence",value:function(e){return"".concat((0,a.capitalize)(this.generateRandomWords(e)),".")}},{key:"generateRandomParagraph",value:function(e){var n=this,r=this.sentencesPerParagraph,t=r.min,o=r.max,i=e||this.generateRandomInteger(t,o);return(0,a.makeArrayOfLength)(i).reduce((function(e,r){return"".concat(n.generateRandomSentence()," ").concat(e)}),"").trim()}},{key:"pluckRandomWord",value:function(){var e=this.words.length-1,n=this.generateRandomInteger(0,e);return this.words[n]}}])&&i(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),e}();n.default=s},827:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=function(e){var n=e.trim();return n.charAt(0).toUpperCase()+n.slice(1)}},270:(e,n,r)=>{Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"capitalize",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(n,"isNode",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(n,"isReactNative",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(n,"isWindows",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(n,"makeArrayOfLength",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(n,"makeArrayOfStrings",{enumerable:!0,get:function(){return s.default}});var t=d(r(827)),a=d(r(984)),o=d(r(97)),i=d(r(606)),c=d(r(318)),s=d(r(490));function d(e){return e&&e.__esModule?e:{default:e}}},984:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=function(){return!!e.exports}},97:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=function(){var e=!1;try{e="ReactNative"===navigator.product}catch(n){e=!1}return e}},606:(e,n,r)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=r(3);n.default=function(){var e=!1;try{e=process.platform===t.SUPPORTED_PLATFORMS.WIN32}catch(n){e=!1}return e}},318:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return Array.apply(null,Array(e)).map((function(e,n){return n}))}},490:(e,n,r)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t,a=(t=r(318))&&t.__esModule?t:{default:t};n.default=function(e,n){return(0,a.default)(e).map((function(){return n()}))}},379:e=>{var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var o={},i=[],c=0;c<e.length;c++){var s=e[c],d=t.base?s[0]+t.base:s[0],u=o[d]||0,l="".concat(d," ").concat(u);o[d]=u+1;var A=r(l),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)n[A].references++,n[A].updater(f);else{var p=a(f,t);t.byIndex=c,n.splice(c,0,{identifier:l,updater:p,references:1})}i.push(l)}return i}function a(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;r.update(e=n)}else r.remove()}}e.exports=function(e,a){var o=t(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var c=r(o[i]);n[c].references--}for(var s=t(e,a),d=0;d<o.length;d++){var u=r(o[d]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}o=s}}},569:e=>{var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,r)=>{e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var a=void 0!==r.layer;a&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,a&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},374:(e,n,r)=>{e.exports=r.p+"eb04dce4c2b321e2ef0a.ttf"},33:(e,n,r)=>{e.exports=r.p+"dffaa77a0c339ce2b5da.ttf"},750:(e,n,r)=>{e.exports=r.p+"d642e323ffd6a3c94820.png"}},h={};function g(e){var n=h[e];if(void 0!==n)return n.exports;var r=h[e]={id:e,exports:{}};return m[e](r,r.exports,g),r.exports}g.m=m,g.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return g.d(n,{a:n}),n},g.d=(e,n)=>{for(var r in n)g.o(n,r)&&!g.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},g.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),g.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;g.g.importScripts&&(e=g.g.location+"");var n=g.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),g.p=e})(),g.b=document.baseURI||self.location.href,g.nc=void 0,e=g(380),n=g(379),r=g.n(n),t=g(795),a=g.n(t),o=g(569),i=g.n(o),c=g(565),s=g.n(c),d=g(216),u=g.n(d),l=g(589),A=g.n(l),f=g(772),(p={}).styleTagTransform=A(),p.setAttributes=s(),p.insert=i().bind(null,"head"),p.domAPI=a(),p.insertStyleElement=u(),r()(f.Z,p),f.Z&&f.Z.locals&&f.Z.locals,(()=>{const n=document.querySelector("#content");return{createHomePage:function(){return n.append((()=>{const e=document.createElement("header");return e.classList.add("header-container"),e.append((()=>{const e=document.createElement("span");return e.textContent="Waffle World",e})(),(()=>{const e=document.createElement("ul");e.classList.add("tab-container");const n=document.createElement("li"),r=document.createElement("li"),t=document.createElement("li");return n.textContent="Home",r.textContent="Menu",t.textContent="About",e.append(n,r,t),e})(),(()=>{const e=document.createElement("div"),n=document.createElement("img"),r=document.createElement("img"),t=document.createElement("img"),a=document.createElement("button");return e.classList.add("icon-container"),n.classList.add("header-icon"),n.src="../src/icons/account(1).svg",r.classList.add("header-icon"),r.src="../src/icons/cart.svg",t.classList.add("header-icon"),t.src="../src/icons/magnify(1).svg",a.classList.add("header-button"),a.textContent="Order Online",e.append(n,r,t,a),e})()),e})(),(()=>{const n=document.createElement("div"),r=document.createElement("h2"),t=document.createElement("p"),a=document.createElement("button");return n.classList.add("body-home-container"),r.setAttribute("id","body-title"),t.classList.add("body-description"),a.classList.add("body-button"),r.textContent="Best Waffle Restaurant",t.textContent=(0,e.fH)({count:3}),a.textContent="Order Now",n.append(r,t,a),n})())}}})().createHomePage(),console.log("this is working")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,