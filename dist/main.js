(()=>{"use strict";var e,t,n,r,a,o,i,c,u,s,d,l,f,p,m,v={772:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,"* , *::before, *::after {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\n\r\n:root {\r\n    height: 100%;\r\n    width: 100%\r\n}\r\n\r\n\r\nbody {\r\n    height:100%;\r\n    width: 100%;\r\n}\r\n\r\n\r\n#content {\r\n    height: 100%;\r\n    width: 100%;\r\n}\r\n\r\n.header-container {\r\n    font-size: 1.5rem;\r\n    padding: 1em 3em;\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n\r\n.tab-container {\r\n    display: flex;\r\n    gap: 3em;\r\n}","",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;;AAGA;IACI,YAAY;IACZ;AACJ;;;AAGA;IACI,WAAW;IACX,WAAW;AACf;;;AAGA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;IAChB,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,QAAQ;AACZ",sourcesContent:["* , *::before, *::after {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\n\r\n:root {\r\n    height: 100%;\r\n    width: 100%\r\n}\r\n\r\n\r\nbody {\r\n    height:100%;\r\n    width: 100%;\r\n}\r\n\r\n\r\n#content {\r\n    height: 100%;\r\n    width: 100%;\r\n}\r\n\r\n.header-container {\r\n    font-size: 1.5rem;\r\n    padding: 1em 3em;\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n\r\n.tab-container {\r\n    display: flex;\r\n    gap: 3em;\r\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var u=this[c][0];null!=u&&(i[u]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);r&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}},731:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FORMAT_PLAIN=t.FORMAT_HTML=t.FORMATS=void 0;var n="html";t.FORMAT_HTML=n;var r="plain";t.FORMAT_PLAIN=r;var a=[n,r];t.FORMATS=a},670:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LINE_ENDINGS=void 0,t.LINE_ENDINGS={POSIX:"\n",WIN32:"\r\n"}},3:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SUPPORTED_PLATFORMS=void 0,t.SUPPORTED_PLATFORMS={DARWIN:"darwin",LINUX:"linux",WIN32:"win32"}},755:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UNIT_WORDS=t.UNIT_WORD=t.UNIT_SENTENCES=t.UNIT_SENTENCE=t.UNIT_PARAGRAPHS=t.UNIT_PARAGRAPH=t.UNITS=void 0;var n="words";t.UNIT_WORDS=n;var r="word";t.UNIT_WORD=r;var a="sentences";t.UNIT_SENTENCES=a;var o="sentence";t.UNIT_SENTENCE=o;var i="paragraphs";t.UNIT_PARAGRAPHS=i;var c="paragraph";t.UNIT_PARAGRAPH=c;var u=[n,r,a,o,i,c];t.UNITS=u},749:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WORDS=void 0,t.WORDS=["ad","adipisicing","aliqua","aliquip","amet","anim","aute","cillum","commodo","consectetur","consequat","culpa","cupidatat","deserunt","do","dolor","dolore","duis","ea","eiusmod","elit","enim","esse","est","et","eu","ex","excepteur","exercitation","fugiat","id","in","incididunt","ipsum","irure","labore","laboris","laborum","Lorem","magna","minim","mollit","nisi","non","nostrud","nulla","occaecat","officia","pariatur","proident","qui","quis","reprehenderit","sint","sit","sunt","tempor","ullamco","ut","velit","veniam","voluptate"]},380:(e,t,n)=>{t.fH=void 0;var r,a=n(731),o=n(755),i=n(749),c=(r=n(935))&&r.__esModule?r:{default:r};t.fH=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.count,n=void 0===t?1:t,r=e.format,u=void 0===r?a.FORMAT_PLAIN:r,s=e.paragraphLowerBound,d=void 0===s?3:s,l=e.paragraphUpperBound,f=void 0===l?7:l,p=e.random,m=e.sentenceLowerBound,v=void 0===m?5:m,h=e.sentenceUpperBound,g=void 0===h?15:h,A=e.units,y=void 0===A?o.UNIT_SENTENCES:A,b=e.words,P=void 0===b?i.WORDS:b,I=e.suffix,_=void 0===I?"":I,O={random:p,sentencesPerParagraph:{max:f,min:d},words:P,wordsPerSentence:{max:g,min:v}},N=new c.default(O,u,_);switch(y){case o.UNIT_PARAGRAPHS:case o.UNIT_PARAGRAPH:return N.generateParagraphs(n);case o.UNIT_SENTENCES:case o.UNIT_SENTENCE:return N.generateSentences(n);case o.UNIT_WORDS:case o.UNIT_WORD:return N.generateWords(n);default:return""}}},935:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=n(731),o=n(670),i=(r=n(140))&&r.__esModule?r:{default:r},c=n(270);function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var l=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a.FORMAT_PLAIN,r=arguments.length>2?arguments[2]:void 0;if(u(this,e),this.format=n,this.suffix=r,d(this,"generator",void 0),-1===a.FORMATS.indexOf(n.toLowerCase()))throw new Error("".concat(n," is an invalid format. Please use ").concat(a.FORMATS.join(" or "),"."));this.generator=new i.default(t)}var t,n;return t=e,(n=[{key:"getLineEnding",value:function(){return this.suffix?this.suffix:!(0,c.isReactNative)()&&(0,c.isNode)()&&(0,c.isWindows)()?o.LINE_ENDINGS.WIN32:o.LINE_ENDINGS.POSIX}},{key:"formatString",value:function(e){return this.format===a.FORMAT_HTML?"<p>".concat(e,"</p>"):e}},{key:"formatStrings",value:function(e){var t=this;return e.map((function(e){return t.formatString(e)}))}},{key:"generateWords",value:function(e){return this.formatString(this.generator.generateRandomWords(e))}},{key:"generateSentences",value:function(e){return this.formatString(this.generator.generateRandomParagraph(e))}},{key:"generateParagraphs",value:function(e){var t=this.generator.generateRandomParagraph.bind(this.generator);return this.formatStrings((0,c.makeArrayOfStrings)(e,t)).join(this.getLineEnding())}}])&&s(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();t.default=l},140:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n(749),a=n(270);function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.sentencesPerParagraph,a=void 0===n?{max:7,min:3}:n,i=t.wordsPerSentence,u=void 0===i?{max:15,min:5}:i,s=t.random,d=(t.seed,t.words),l=void 0===d?r.WORDS:d;if(o(this,e),c(this,"sentencesPerParagraph",void 0),c(this,"wordsPerSentence",void 0),c(this,"random",void 0),c(this,"words",void 0),a.min>a.max)throw new Error("Minimum number of sentences per paragraph (".concat(a.min,") cannot exceed maximum (").concat(a.max,")."));if(u.min>u.max)throw new Error("Minimum number of words per sentence (".concat(u.min,") cannot exceed maximum (").concat(u.max,")."));this.sentencesPerParagraph=a,this.words=l,this.wordsPerSentence=u,this.random=s||Math.random}var t,n;return t=e,(n=[{key:"generateRandomInteger",value:function(e,t){return Math.floor(this.random()*(t-e+1)+e)}},{key:"generateRandomWords",value:function(e){var t=this,n=this.wordsPerSentence,r=n.min,o=n.max,i=e||this.generateRandomInteger(r,o);return(0,a.makeArrayOfLength)(i).reduce((function(e,n){return"".concat(t.pluckRandomWord()," ").concat(e)}),"").trim()}},{key:"generateRandomSentence",value:function(e){return"".concat((0,a.capitalize)(this.generateRandomWords(e)),".")}},{key:"generateRandomParagraph",value:function(e){var t=this,n=this.sentencesPerParagraph,r=n.min,o=n.max,i=e||this.generateRandomInteger(r,o);return(0,a.makeArrayOfLength)(i).reduce((function(e,n){return"".concat(t.generateRandomSentence()," ").concat(e)}),"").trim()}},{key:"pluckRandomWord",value:function(){var e=this.words.length-1,t=this.generateRandomInteger(0,e);return this.words[t]}}])&&i(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();t.default=u},827:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){var t=e.trim();return t.charAt(0).toUpperCase()+t.slice(1)}},270:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"capitalize",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(t,"isNode",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"isReactNative",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"isWindows",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"makeArrayOfLength",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(t,"makeArrayOfStrings",{enumerable:!0,get:function(){return u.default}});var r=s(n(827)),a=s(n(984)),o=s(n(97)),i=s(n(606)),c=s(n(318)),u=s(n(490));function s(e){return e&&e.__esModule?e:{default:e}}},984:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(){return!!e.exports}},97:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(){var e=!1;try{e="ReactNative"===navigator.product}catch(t){e=!1}return e}},606:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n(3);t.default=function(){var e=!1;try{e=process.platform===r.SUPPORTED_PLATFORMS.WIN32}catch(t){e=!1}return e}},318:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return Array.apply(null,Array(e)).map((function(e,t){return t}))}},490:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=(r=n(318))&&r.__esModule?r:{default:r};t.default=function(e,t){return(0,a.default)(e).map((function(){return t()}))}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],c=0;c<e.length;c++){var u=e[c],s=r.base?u[0]+r.base:u[0],d=o[s]||0,l="".concat(s," ").concat(d);o[s]=d+1;var f=n(l),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var m=a(p,r);r.byIndex=c,t.splice(c,0,{identifier:l,updater:m,references:1})}i.push(l)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var c=n(o[i]);t[c].references--}for(var u=r(e,a),s=0;s<o.length;s++){var d=n(o[s]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}o=u}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},h={};function g(e){var t=h[e];if(void 0!==t)return t.exports;var n=h[e]={id:e,exports:{}};return v[e](n,n.exports,g),n.exports}g.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return g.d(t,{a:t}),t},g.d=(e,t)=>{for(var n in t)g.o(t,n)&&!g.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},g.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),g.nc=void 0,e=g(380),t=g(379),n=g.n(t),r=g(795),a=g.n(r),o=g(569),i=g.n(o),c=g(565),u=g.n(c),s=g(216),d=g.n(s),l=g(589),f=g.n(l),p=g(772),(m={}).styleTagTransform=f(),m.setAttributes=u(),m.insert=i().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=d(),n()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals,(()=>{const t=document.querySelector("#content");return{createHomePage:function(){return t.append((()=>{const e=document.createElement("header");return e.classList.add("header-container"),e.append((()=>{const e=document.createElement("span");return e.textContent="Waffle World",e})(),(()=>{const e=document.createElement("ul");e.classList.add("tab-container");const t=document.createElement("li"),n=document.createElement("li"),r=document.createElement("li");return t.textContent="Home",n.textContent="Menu",r.textContent="About",e.append(t,n,r),e})(),(()=>{const e=document.createElement("div"),t=document.createElement("img"),n=document.createElement("img"),r=document.createElement("img"),a=document.createElement("button");return e.classList.add("icon-container"),t.classList.add("header-icon"),t.src="../src/icons/account(1).svg",t.style.height="2rem",n.classList.add("header-icon"),n.src="../src/icons/cart.svg",n.style.height="2rem",r.classList.add("header-icon"),r.src="../src/icons/magnify(1).svg",r.style.height="2rem",a.classList.add("header-button"),a.textContent="Order Online",e.append(t,n,r,a),e})()),e})(),(()=>{const t=document.createElement("div"),n=document.createElement("h2"),r=document.createElement("p"),a=document.createElement("button");return t.classList.add("body-home-container"),n.setAttribute("id","body-title"),r.classList.add("body-description"),a.classList.add("body-button"),n.textContent="Best Waffle Restaurant",r.textContent=(0,e.fH)({count:3}),a.textContent="Order Now",t.append(n,r,a),t})())}}})().createHomePage(),console.log("this is working")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,